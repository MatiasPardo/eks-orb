version: 2.1

description: Install tools to interact with AWS EKS

examples:
  install_kubectl:
    description: Install kubectl
    usage:
      version: 2.1

      orbs:
        eks: tiendanube/eks@1.0.0

      jobs:
        build:
          docker:
            - image: circleci/openjdk:8-jdk
          steps:
            - checkout
            - eks/install_kubectl

  install_aws_iam_authenticator:
    description: Install AWS IAM Authenticator
    usage:
      version: 2.1
      orbs:
        eks: tiendanube/eks@1.0.0
      jobs:
        build:
          docker:
            - image: circleci/openjdk:8-jdk
          steps:
            - checkout
            - eks/install_aws_iam_authenticator

  deploy:
    description: Deploy to EKS
    usage:
      version: 2.1
      orbs:
        eks: tiendanube/eks@1.0.0
      workflows:
        deploy:
          jobs:
            - eks/deploy:
                cluster_name: cluster_name
                region: region
                steps:
                  - run:
                      command: |
                        kubectl apply -f bundle.yml
                        kubectl apply -f deployment.yml

orbs:
  aws-cli: circleci/aws-cli@0.1.6

executors:
  eks:
    docker:
      - image: circleci/openjdk:8-jdk-node

commands:
  install_kubectl:
    description: Install kubectl
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin

  install_aws_iam_authenticator:
    description: Install AWS IAM Authenticator
    steps:
      - run:
          name: Install AWS IAM Authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin

  install_helm:
    description: Install Helm & Tiller
    steps:
      - run:
          name: Install Helm & Tiller
          command: |
            curl -o helm-v2.12.1-linux-amd64.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.12.1-linux-amd64.tar.gz
            tar -zxvf helm-v2.12.1-linux-amd64.tar.gz
            sudo mv ./linux-amd64/helm /usr/local/bin
            sudo mv ./linux-amd64/tiller /usr/local/bin
            helm init
            helm plugin install https://github.com/hypnoglow/helm-s3.git

  authenticate_eks_cluster:
    description: Authenticate to EKS Cluster
    parameters:
      cluster_name:
        type: string
        description: EKS cluster name
      region:
        type: string
        description: AWS region where the eks cluster is located
    steps:
      - run:
          name: Authenticate to EKS Cluster
          command: aws eks update-kubeconfig --name << parameters.cluster_name >> --region << parameters.region >>

jobs:
  deploy:
    description: |
      Checkout, install awscli, kubectl, aws iam authenticator, authenticate to eks cluster and run the steps provided
    executor: eks
    parameters:
      cluster_name:
        type: string
        description: EKS cluster name
      region:
        type: string
        description: AWS region where the eks cluster is located
      steps:
        type: steps
        description: Steps to deploy your application (e.g. kubectl apply -f deployment.yml)
    steps:
      - checkout
      - aws-cli/install
      - install_kubectl
      - install_aws_iam_authenticator
      - authenticate_eks_cluster:
          cluster_name: << parameters.cluster_name >>
          region: << parameters.region >>
      - install_helm
      - steps: << parameters.steps >>

  blue-green-deploy:
    description: |
      Checkout, install awscli, kubectl, aws iam authenticator, authenticate to eks cluster and execute a blue/green deploy
    executor: eks
    parameters:
      cluster_name:
        type: string
        description: EKS cluster name
      region:
        type: string
        description: AWS region where the eks cluster is located
      deployment-name:
        type: string
        description: Deployment name
      deployment-namespace:
        type: string
        description: Deployment namespace
      service-name:
        type: string
        description: Which k8s service should be updated with the new version
      new-version:
        type: string
        description: Which version should be deployed
        default: "${CIRCLE_SHA1:0:7}"
      working-directory:
        type: string
        description: Folder where the k8s config files are located
    steps:
      - checkout
      - aws-cli/install
      - install_kubectl
      - install_aws_iam_authenticator
      - authenticate_eks_cluster:
          cluster_name: << parameters.cluster_name >>
          region: << parameters.region >>
      - run:
          name: Blue/Green Deploy
          working_directory: << parameters.working-directory >>
          command: |
            DEPLOYMENT_NAME=<< parameters.deployment-name >>
            DEPLOYMENT_NAMESPACE=<< parameters.deployment-namespace >>
            SERVICE_NAME=<< parameters.service-name >>
            CURRENT_VERSION=$(kubectl get service "${DEPLOYMENT_NAME}" -o=jsonpath='{.spec.selector.version}' --namespace "${DEPLOYMENT_NAMESPACE}" || true)
            NEW_VERSION=<< parameters.new-version >>

            if [[ "${CURRENT_VERSION}" == "${NEW_VERSION}" ]]; then
              echo "CURRENT_VERSION and NEW_VERSION are the same: ${CURRENT_VERSION}"
              exit 0
            fi

            if [[ -z "${CURRENT_VERSION}" ]]; then
              echo "Deployment not found, creating the first version of the application with version: ${NEW_VERSION}!"
              sed "s/VERSION/${NEW_VERSION}/g" deployment.yml | kubectl apply --namespace "${DEPLOYMENT_NAMESPACE}" -f -
              sed "s/VERSION/${NEW_VERSION}/g" service.yml | kubectl apply --namespace "${DEPLOYMENT_NAMESPACE}" -f -
              kubectl rollout status deployment/"${DEPLOYMENT_NAME}-${NEW_VERSION}" --namespace "${DEPLOYMENT_NAMESPACE}"
              exit 0
            fi

            echo "Create a new deployment"
            kubectl get deployment "${DEPLOYMENT_NAME}-${CURRENT_VERSION}" --output yaml --namespace "${DEPLOYMENT_NAMESPACE}" | sed -e "s/${CURRENT_VERSION}/${NEW_VERSION}/g" | kubectl apply --namespace "${DEPLOYMENT_NAMESPACE}" -f -

            echo "Wait for the new deployment to be available"
            kubectl rollout status deployment/"${DEPLOYMENT_NAME}-${NEW_VERSION}" --namespace "${DEPLOYMENT_NAMESPACE}"

            sleep 30

            echo "Update service to send traffic to the new deployment"
            kubectl get service "${SERVICE_NAME}" --output yaml --namespace "${DEPLOYMENT_NAMESPACE}" | sed -e "s/${CURRENT_VERSION}/${NEW_VERSION}/g" | kubectl apply --namespace "${DEPLOYMENT_NAMESPACE}" -f -

            sleep 30

            echo "Delete previous deployment version"
            kubectl delete deployment "${DEPLOYMENT_NAME}-${CURRENT_VERSION}" --namespace "${DEPLOYMENT_NAMESPACE}"
